#!/usr/bin/env python2.7

import subprocess, sys, os, re

def state():
    connected = []
    active = []
    cur = None
    for line in subprocess.check_output('xrandr').strip().splitlines():
        m = re.match(r'([a-zA-Z0-9]+) connected', line)
        if m:
            cur = m.group(1)
            idx = len(connected)
            connected.append((cur, []))
        m = re.match(r'\s+([0-9]+)+x([0-9]+)+\s+[0-9]{2}\.[0-9]{2}(\*?)', line)
        if m:
            x, y, a = m.groups()
            x = int(x)
            y = int(y)
            connected[-1][1].append((x, y))
            if a:
                active.append(idx)
    return connected, active

def switch():
    con, act = state()
    # Cycle between each display and finally clone all displays.
    if len(act) == 1:
        idx = act[0] + 1
        if idx == len(con):
            # Turn on all displays
            on = con
        else:
            # Turn on next display
            on = [con[idx]]
    else:
        # Turn on first display
        on = [con[0]]

    off = [d for d in dict(con).keys() if d not in dict(on).keys()]

    for r in on[0][1]:
        if all(r in d[1] for d in on):
            res = r
            # Common resolution
            break
    else:
        # No common resolution, turn on first display
        on = [con[0]]
        off = [d[0] for d in con[1:]]

    on = [d[0] for d in on]

    if len(on) == 1:
        mode = ['--auto']
    else:
        mode = ['--mode', '%dx%d' % res]

    args = ['xrandr']
    for d in off:
        args += ['--output', d, '--off']

    for d in on:
        args += ['--output', d] + mode

    subprocess.call(args)

if __name__ == '__main__':
    switch()
